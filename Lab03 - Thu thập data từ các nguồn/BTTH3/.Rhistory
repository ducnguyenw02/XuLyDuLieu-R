install.packages('xml2')
install.packages('xml2')
rm(list = ls())
library('httr')
library('xml12')
rm(list = ls())
library('httr')
library('xml12')
install.packages('httr')
install.packages('httr')
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
data <-GET("https://www.worldometers.info/coronavirus/#countries")
content <- content(data, as="text")
html_data <- read_xml(content, as_html = TRUE)
table_data <- xml_text(xml_find_all(html_data,
"//table[@id='main_table_countries_today']//tbody//tr//td"))
table_head <- xml_text(xml_find_all(html_data,
"//table[@id='main_table_countries_today']//thead//tr//th"))
dataset <- matrix(ncol=length(table_head), nrow =
(length(table_data)/ length(table_head) ))
data_col = length(table_head)
count = 1
i = 1
while(i<=length(table_data) - data_col) {
dataset[count, ] <- c(table_data[i:(i -1 + data_col)])
i = i + data_col;
count = count + 1
}
dataset <- dataset[-c(237:244),]
dataset <- dataset[-c(1:8),]
dataset <- as.data.frame(dataset)
dataset <- na.omit(dataset)
names(dataset) <- c(table_head)
write.csv(dataset, "corona_data.csv")
# Câu 1. 5 quốc gia có số ca nhiễm nhiều nhất
for (i in 1 : nrow(dataset)){
for( j in 1 : ncol(dataset)){
dataset[i,j] = str_replace(dataset[i,j], "," , "")
dataset[i,j] = str_replace(dataset[i,j], "," , "")
}
}
dataset$TotalCases <- as.numeric(dataset$TotalCases)
dataset$NewCases <- as.numeric(dataset$NewCases)
dataset$TotalRecovered <- as.numeric(dataset$TotalRecovered)
for ( i in 1:5){
print(dataset$`Country,Other`[i])
}
# Câu 2. Quốc gia có số ca nhiễm mới cao nhất
a <- dataset$NewCases
a <- order(-a)
print(dataset$Country.Other[a[1]])
# Câu 3. Tính tỉ lệ tổng số ca bình phục trên tổng số ca nhiễm. Xác định 3 quốc gia có tỉ lệ
# bình phục cao nhất.
Tile <- c(0)
dataset <- data.frame(dataset, Tile)
for ( i in 1:length(a)){
dataset$Tile[i] <- dataset$TotalRecovered[i] / dataset$TotalCases[i]
}
b <- dataset$Tile
b <- order(-b)
print(dataset$Country.Other[b[1]])
print(dataset$Country.Other[b[2]])
print(dataset$Country.Other[b[3]])
View(dataset)
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
data <-GET("https://www.worldometers.info/coronavirus/#countries")
content <- content(data, as="text")
html_data <- read_xml(content, as_html = TRUE)
table_data <- xml_text(xml_find_all(html_data,
"//table[@id='main_table_countries_today']//tbody//tr//td"))
table_head <- xml_text(xml_find_all(html_data,
"//table[@id='main_table_countries_today']//thead//tr//th"))
dataset <- matrix(ncol=length(table_head), nrow =
(length(table_data)/ length(table_head) ))
data_col = length(table_head)
count = 1
i = 1
while(i<=length(table_data) - data_col) {
dataset[count, ] <- c(table_data[i:(i -1 + data_col)])
i = i + data_col;
count = count + 1
}
dataset <- dataset[-c(237:244),]
dataset <- dataset[-c(1:8),]
dataset <- as.data.frame(dataset)
dataset <- na.omit(dataset)
names(dataset) <- c(table_head)
write.csv(dataset, "corona_data.csv")
# Câu 1. 5 quốc gia có số ca nhiễm nhiều nhất
for (i in 1 : nrow(dataset)){
for( j in 1 : ncol(dataset)){
dataset[i,j] = str_replace(dataset[i,j], "," , "")
dataset[i,j] = str_replace(dataset[i,j], "," , "")
}
}
dataset$TotalCases <- as.numeric(dataset$TotalCases)
dataset$NewCases <- as.numeric(dataset$NewCases)
dataset$TotalRecovered <- as.numeric(dataset$TotalRecovered)
for ( i in 1:5){
print(dataset$`Country,Other`[i])
}
# Câu 2. Quốc gia có số ca nhiễm mới cao nhất
a <- dataset$NewCases
a <- order(-a)
print(dataset$Country.Other[a[1]])
# Câu 3. Tính tỉ lệ tổng số ca bình phục trên tổng số ca nhiễm. Xác định 3 quốc gia có tỉ lệ
# bình phục cao nhất.
Tile <- c(0)
dataset <- data.frame(dataset, Tile)
for ( i in 1:length(a)){
dataset$Tile[i] <- dataset$TotalRecovered[i] / dataset$TotalCases[i]
}
b <- dataset$Tile
b <- order(-b)
print(dataset$Country.Other[b[1]])
print(dataset$Country.Other[b[2]])
print(dataset$Country.Other[b[3]])
library(jsonlite)
library(anytime)
library(lubridate)
install.packages(anytime)
install.packages("lubridate")
install.packages("anytime")
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
library(jsonlite)
library(anytime)
library(lubridate)
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
library(jsonlite)
library(anytime)
library(lubridate)
link <-"https://samples.openweathermap.org/data/2.5/forecast/hou
rly?zip=70000&appid=b6907d289e10d714a6e88b30761fae22"
api <- GET(link)
content <- content(api)
json_content <- toJSON(content)
# doc du lieu dang json
data <- fromJSON(json_content, flatten = TRUE)
#data2 <- fromJSON(json_content, flatten = FALSE)
dataset <- as.data.frame(data['list'])
# chuyen nhet do tu do F sang do C
convert_to_censius <- function(temp) {
return(temp - 273.15)
}
# chuyen timestamp to date
convert_timestamp_to_date <- function(time) {
return(anytime(time))
}
# chuyen nhiet do tu do K sang do C
dataset$list.main.temp = lapply(dataset$list.main.temp,
convert_to_censius)
# sap xep theo thoi gian tang dan
dataset$list.dt <- as.numeric(dataset$list.dt)
dataset <- dataset[order(dataset$list.dt), ]
dataset$list.dt <- as_datetime(anytime(dataset$list.dt))
# ve bieu do nhiet do theo tung ngay
plot(dataset$list.dt, y=dataset$list.main.temp, type="o",
main="Temperature", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
axis(2, at=dataset$list.main.temp)
# ve bieu do phan bo nhiet do
plot(density(as.numeric(dataset$list.main.temp)))
# v la vertical line, h: horizatal line
abline(v=mean(as.numeric(dataset$list.main.temp)),
col="red")
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
library(jsonlite)
library(anytime)
library(lubridate)
link <-"https://samples.openweathermap.org/data/2.5/forecast/hou
rly?zip=70000&appid=b6907d289e10d714a6e88b30761fae22"
api <- GET(link)
content <- content(api)
json_content <- toJSON(content)
data <- fromJSON(json_content, flatten = TRUE)
dataset <- as.data.frame(data['list'])
View(dataset)
convert_to_censius <- function(temp) {
return(temp - 273.15)
}
convert_timestamp_to_date <- function(time) {
return(anytime(time))
}
View(convert_timestamp_to_date)
View(convert_to_censius)
dataset$list.main.temp = lapply(dataset$list.main.temp,
convert_to_censius)
dataset$list.dt <- as.numeric(dataset$list.dt)
dataset <- dataset[order(dataset$list.dt), ]
dataset$list.dt <- as_datetime(anytime(dataset$list.dt))
plot(dataset$list.dt, y=dataset$list.main.temp, type="o",
main="Temperature", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
axis(2, at=dataset$list.main.temp)
library(jsonlite)
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
library(jsonlite)
library(anytime)
library(lubridate)
link <-"https://samples.openweathermap.org/data/2.5/forecast/hou
rly?zip=70000&appid=b6907d289e10d714a6e88b30761fae22"
api <- GET(link)
content <- content(api)
json_content <- toJSON(content)
# doc du lieu dang json
data <- fromJSON(json_content, flatten = TRUE)
link <-"https://samples.openweathermap.org/data/2.5/forecast/hourly?zip=70000&appid=b6907d289e10d714a6e88b30761fae22"
api <- GET(link)
content <- content(api)
json_content <- toJSON(content)
# doc du lieu dang json
data <- fromJSON(json_content, flatten = TRUE)
#data2 <- fromJSON(json_content, flatten = FALSE)
dataset <- as.data.frame(data['list'])
rm(list=ls())
library(httr)
library(xml2)
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
library(jsonlite)
library(anytime)
library(lubridate)
link <-"https://samples.openweathermap.org/data/2.5/forecast/hourly?zip=70000&appid=b6907d289e10d714a6e88b30761fae22"
api <- GET(link)
content <- content(api)
json_content <- toJSON(content)
# doc du lieu dang json
data <- fromJSON(json_content, flatten = TRUE)
#data2 <- fromJSON(json_content, flatten = FALSE)
dataset <- as.data.frame(data['list'])
# chuyen nhet do tu do F sang do C
convert_to_censius <- function(temp) {
return(temp - 273.15)
}
# chuyen timestamp to date
convert_timestamp_to_date <- function(time) {
return(anytime(time))
}
# chuyen nhiet do tu do K sang do C
dataset$list.main.temp = lapply(dataset$list.main.temp,
convert_to_censius)
# sap xep theo thoi gian tang dan
dataset$list.dt <- as.numeric(dataset$list.dt)
dataset <- dataset[order(dataset$list.dt), ]
dataset$list.dt <- as_datetime(anytime(dataset$list.dt))
# ve bieu do nhiet do theo tung ngay
plot(dataset$list.dt, y=dataset$list.main.temp, type="o",
main="Temperature", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
axis(2, at=dataset$list.main.temp)
plot(density(as.numeric(dataset$list.main.temp)))
abline(v=mean(as.numeric(dataset$list.main.temp)), col="red")
plot(density(as.numeric(dataset$list.main.temp)))
View(dataset)
plot(dataset$list.dt, y=dataset$list.main.pressure, type="o",
main="Temperature", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.wind.speed, type="o",
main="Temperature", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.wind.speed, type="o",
main="Wind speed", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.main.pressure, type="o",
main="Pressure", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-
%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.main.pressure, type="o",
main="Pressure", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.wind.speed, type="o",
main="Wind speed", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
View(data)
View(dataset)
plot(dataset$list.dt, y=dataset$list.wind.speed, type="o",
main="Wind speed", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%Y-%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.main.pressure, type="o",
main="Pressure", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%y-%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
plot(dataset$list.dt, y=dataset$list.main.pressure, type="o",
main="Pressure", labels = FALSE)
axis.POSIXct(1, at=anytime(dataset$list.dt), format="%Y-%m-%d %H:%M:%S", origin="1970-01-01 00:00:00",
labels=TRUE)
install.packages("gsheet")
rm(list=ls())
library(gsheet)
dataset <- gsheet2tbl(link_patien)
link_patien <-"https://docs.google.com/spreadsheets/d/1XEFg047aSbg3OsEVx9PzmgSxGbCvCidfLiHfsgRS3R0/edit?usp=sharing"
dataset <- gsheet2tbl(link_patien)
View(dataset)
data_by_date <- table(dataset$`Date Announced`)
barplot(data_by_date)
View(dataset)
data_by_date <- table(dataset$Date.Announced)
barplot(data_by_date)
data_by_detected_city <- table(dataset$Detected.City)
barplot(data_by_date)
data_by_date <- table(dataset$Date.Announced)
barplot(data_by_date)
data_by_detected_city <- table(dataset$Detected.City)
barplot(data_by_detected_city)
data_by_detected_city
data_by_age <- table(dataset$Age.Bracket)
plot(data_by_age)
data_by_age
data_by_detected_city <- table(dataset$Detected.City)
data_by_detected_city
dataset3 <- dataset[which(dataset$City.Patient.Number) == 'Hokkaido']
dataset3 <- dataset[which(dataset$City.Patient.Number) == 'Hokkaido',]
dataset3 <- dataset[which(dataset$City.Patient.Number == 'Hokkaido'),]
View(dataset3)
View(dataset)
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
for (i in 1 : nrow(dataset)){
j = 2
dataset[i,j] = str_replace(dataset[i,j], "#" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
}
}
View(dataset)
View(dataset)
View(dataset)
rm(list=ls())
library(gsheet)
library(stringr)
link_patien <-"https://docs.google.com/spreadsheets/d/1XEFg047aSbg3OsEVx9PzmgSxGbCvCidfLiHfsgRS3R0/edit?usp=sharing"
dataset <- gsheet2tbl(link_patien)
# Câu 1 Liệt kê số ca nhiễm theo từng thành phố (Detected City)
data_by_detected_city <- table(dataset$Detected.City)
data_by_detected_city
# Câu 2 Liệt kê số ca nhiễm theo độ tuổi, vẽ biểu đồ (sử dụng hàm plot).
data_by_age <- table(dataset$Age.Bracket)
plot(data_by_age)
# Câu 3 Liệt kê số ca nhiễm tại Hokkaido theo từng ngày. Vẽ biểu đồ.
for (i in 1 : nrow(dataset)){
j = 2
dataset[i,j] = str_replace(dataset[i,j], "#" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
}
}
dataset3 <- dataset[which(dataset$City.Patient.Number == 'Hokkaido'),]
rm(list=ls())
library(gsheet)
library(stringr)
link_patien <-"https://docs.google.com/spreadsheets/d/1XEFg047aSbg3OsEVx9PzmgSxGbCvCidfLiHfsgRS3R0/edit?usp=sharing"
dataset <- gsheet2tbl(link_patien)
# Câu 1 Liệt kê số ca nhiễm theo từng thành phố (Detected City)
data_by_detected_city <- table(dataset$Detected.City)
data_by_detected_city
# Câu 2 Liệt kê số ca nhiễm theo độ tuổi, vẽ biểu đồ (sử dụng hàm plot).
data_by_age <- table(dataset$Age.Bracket)
plot(data_by_age)
# Câu 3 Liệt kê số ca nhiễm tại Hokkaido theo từng ngày. Vẽ biểu đồ.
for (i in 1 : nrow(dataset)){
j = 2
dataset[i,j] = str_replace(dataset[i,j], "#" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
dataset[i,j] = str_replace(dataset[i,j], "0" , "")
dataset[i,j] = str_replace(dataset[i,j], "1" , "")
dataset[i,j] = str_replace(dataset[i,j], "2" , "")
dataset[i,j] = str_replace(dataset[i,j], "3" , "")
dataset[i,j] = str_replace(dataset[i,j], "4" , "")
dataset[i,j] = str_replace(dataset[i,j], "5" , "")
dataset[i,j] = str_replace(dataset[i,j], "6" , "")
dataset[i,j] = str_replace(dataset[i,j], "7" , "")
dataset[i,j] = str_replace(dataset[i,j], "8" , "")
dataset[i,j] = str_replace(dataset[i,j], "9" , "")
}
dataset3 <- dataset[which(dataset$City.Patient.Number == 'Hokkaido'),]
View(dataset)
View(dataset3)
View(dataset3)
data_hokkaido <- table(dataset$Date.Announced)
barplot(data_hokkaido)
